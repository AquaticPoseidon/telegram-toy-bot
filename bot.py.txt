import logging
import os
import telebot
import gspread
import tempfile
import requests
from flask import Flask
from threading import Thread
from oauth2client.service_account import ServiceAccountCredentials
from telebot.types import InputMediaPhoto

# ---------------------- Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ----------------------

app = Flask('')

@app.route('/')
def home():
    return "–Ø –∂–∏–≤–æ–π!"  # –≠—Ç–æ —É–≤–∏–¥–∏—Ç UptimeRobot

def run():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ---------------------- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ ----------------------

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 1882770883
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

if BOT_TOKEN is None or GOOGLE_SHEET_NAME is None or GOOGLE_CREDENTIALS_JSON is None:
    print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

with tempfile.NamedTemporaryFile(mode='w+', suffix='.json', delete=False) as f:
    f.write(GOOGLE_CREDENTIALS_JSON)
    temp_keyfile = f.name

creds = ServiceAccountCredentials.from_json_keyfile_name(temp_keyfile, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

def convert_drive_link(link):
    if "drive.google.com/file/d/" in link:
        try:
            file_id = link.split("/d/")[1].split("/")[0]
            return f"https://drive.google.com/uc?export=download&id={file_id}"
        except IndexError:
            return None
    return None

welcome_message = (
    "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤—è–∑–∞–Ω—ã—Ö —Å—É–≤–µ–Ω–∏—Ä–Ω—ã—Ö –∏–≥—Ä—É—à–µ–∫ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã üß∏\n"
    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫—É –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º.\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:\n"
    "üì¶ –ö–∞—Ç–∞–ª–æ–≥ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∏–≥—Ä—É—à–∫–∏ —Å —Ü–µ–Ω–∞–º–∏\n"
    "üßµ –°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
    "üßæ –£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n\n"
    "–í –∫–∞—Ä—Ç–æ—á–∫–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—É—à–∫–∏ —É–∫–∞–∑–∞–Ω—ã:\n"
    "üì∑ –§–æ—Ç–æ\nüìê –†–∞–∑–º–µ—Ä\nüí∞ –¶–µ–Ω–∞ (–±–µ–∑ —É—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)\nüì¶ –ù–∞–ª–∏—á–∏–µ (–≤ –Ω–∞–ª–∏—á–∏–∏, –Ω–∞ –∑–∞–∫–∞–∑, –æ—Å—Ç–∞–ª–∞—Å—å 1 —à—Ç—É–∫–∞ –∏ —Ç.–ø.)\n\n"
    "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üíõ"
)

order_terms_text = (
    "### üßæ –£—Å–ª–æ–≤–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
    "**1. –û–ø–ª–∞—Ç–∞:**\n"
    "- –ï—Å–ª–∏ –∏–≥—Ä—É—à–∫–∞ **–≤ –Ω–∞–ª–∏—á–∏–∏**, —Ç—Ä–µ–±—É–µ—Ç—Å—è **–ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞**.\n"
    "- –ï—Å–ª–∏ –∏–≥—Ä—É—à–∫–∞ **–≤—è–∂–µ—Ç—Å—è –Ω–∞ –∑–∞–∫–∞–∑**, –≤–æ–∑–º–æ–∂–Ω–∞ **—á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞** ‚Äî —Å—É–º–º–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n"
    "- –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏).\n\n"
    "**2. –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**\n"
    "- –°—Ä–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π.\n"
    "- –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω—ã, –æ–± —ç—Ç–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –∑–∞—Ä–∞–Ω–µ–µ.\n\n"
    "**3. –î–æ—Å—Ç–∞–≤–∫–∞:**\n"
    "- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –∏–ª–∏ –°–î–≠–ö.\n"
    "- **–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ü–µ–Ω—É –∏–≥—Ä—É—à–∫–∏.**\n"
    "- –î–æ—Å—Ç–∞–≤–∫–∞ **–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏** –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ (–Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É).\n\n"
    "**4. –í–æ–∑–≤—Ä–∞—Ç –∏ –æ–±–º–µ–Ω:**\n"
    "- –ò–∑–¥–µ–ª–∏—è —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –∏–ª–∏ –æ–±–º–µ–Ω—É, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –±—Ä–∞–∫–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ñ–æ—Ç–æ).\n"
    "- **–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π** —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—É **—Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–π –∏–≥—Ä—É—à–∫–∏**, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ—ë –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n\n"
    "**5. –£–ø–∞–∫–æ–≤–∫–∞:**\n"
    "- –ö–∞–∂–¥–∞—è –∏–≥—Ä—É—à–∫–∞ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ **–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç**.\n"
    "- –ü–æ –∑–∞–ø—Ä–æ—Å—É –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ (–æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ).\n\n"
    "**6. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:**\n"
    "- –ú–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—É—à–∫–∏ ‚Äî –æ–±—Å—É–¥–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.\n\n"
    "**7. –°–≤—è–∑—å:**\n"
    "- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É **'–°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º'**."
)

@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üßµ –°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º", "üßæ –£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞")
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
def send_catalog(message):
    records = sheet.get_all_records()

    def price_key(x):
        try:
            return float(x.get('–¶–µ–Ω–∞', 0))
        except (ValueError, TypeError):
            return 0

    sorted_records = sorted(records, key=price_key)

    for item in sorted_records:
        raw_urls = [
            item.get("–§–æ—Ç–æ 1", "").strip(),
            item.get("–§–æ—Ç–æ 2", "").strip(),
            item.get("–§–æ—Ç–æ 3", "").strip()
        ]

        photo_files = []
        for url in raw_urls:
            if not url:
                print("–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                continue

            converted = convert_drive_link(url)
            if not converted:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–∞): {url}")
                continue

            try:
                response = requests.get(converted)
                if response.status_code == 200:
                    photo_files.append(response.content)
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {converted}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

        name = item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")
        price = item.get("–¶–µ–Ω–∞", "")
        size = item.get("–†–∞–∑–º–µ—Ä", "")
        status = item.get("–ù–∞–ª–∏—á–∏–µ", "")

        caption = f"#{name}\n\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)\nüìê –†–∞–∑–º–µ—Ä: {size}\nüì¶ –ù–∞–ª–∏—á–∏–µ: {status}"

        if not photo_files:
            bot.send_message(message.chat.id, caption)
            continue

        media_group = []
        temp_files = []
        try:
            for i, content in enumerate(photo_files):
                tmp = tempfile.NamedTemporaryFile(suffix=".jpg", delete=False)
                tmp.write(content)
                tmp.flush()
                temp_files.append(tmp.name)

                if i == 0:
                    media_group.append(InputMediaPhoto(open(tmp.name, 'rb'), caption=caption))
                else:
                    media_group.append(InputMediaPhoto(open(tmp.name, 'rb')))

            bot.send_media_group(message.chat.id, media_group)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ media_group: {e}")
            bot.send_message(message.chat.id, caption)
        finally:
            for path in temp_files:
                try:
                    os.remove(path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üßµ –°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º")
def contact(message):
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:\n\nüìß Email: polypropile.n@ya.ru\nüí¨ Telegram: @zabawwka")

@bot.message_handler(func=lambda m: m.text == "üßæ –£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞")
def order_terms(message):
    bot.send_message(message.chat.id, order_terms_text, parse_mode="Markdown")

# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö ----------------------

def run_bot():
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")

if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä (UptimeRobot)
    Thread(target=run_bot).start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
